diff --git a/node_modules/app-builder-lib/.DS_Store b/node_modules/app-builder-lib/.DS_Store
new file mode 100644
index 0000000..f9b3028
Binary files /dev/null and b/node_modules/app-builder-lib/.DS_Store differ
diff --git a/node_modules/app-builder-lib/electron-osx-sign/util.js b/node_modules/app-builder-lib/electron-osx-sign/util.js
index 107d8aa..1ce14c9 100644
--- a/node_modules/app-builder-lib/electron-osx-sign/util.js
+++ b/node_modules/app-builder-lib/electron-osx-sign/util.js
@@ -143,6 +143,9 @@ const isBinaryFile = require("isbinaryfile").isBinaryFile;
 const getFilePathIfBinaryAsync = module.exports.getFilePathIfBinaryAsync = function (filePath) {
   return isBinaryFile(filePath)
     .then(function (isBinary) {
+      if (isBinary) {
+        console.log(path.basename(filePath))
+      }
       return isBinary ? filePath : undefined
     })
 }
@@ -202,12 +205,23 @@ module.exports.walkAsync = async function (dirPath) {
       const stat = await fs.lstat(filePath)
       if (stat.isFile()) {
         switch (path.extname(filePath)) {
+          case '': // Binary
+           if (path.basename(filePath)[0] !== '.' && path.basename(filePath) != 'PULL_REQUEST_TEMPLATE') {
+             return getFilePathIfBinaryAsync(filePath)
+           } // Else reject hidden file
+           break
+         case '.dylib': // Dynamic library
+         case '.node': // Native node addon
+           return filePath
           case '.cstemp': // Temporary file generated from past codesign
             debuglog('Removing... ' + filePath)
             await fs.unlink(filePath)
             return
           default:
-            return getFilePathIfBinaryAsync(filePath)
+            if (path.extname(filePath).indexOf(' ') >= 0) {
+               // Still consider the file as binary if extension seems invalid
+               return getFilePathIfBinaryAsync(filePath)
+             }
         }
       } else if (stat.isDirectory() && !stat.isSymbolicLink()) {
         const result = await _walkAsync(filePath)
